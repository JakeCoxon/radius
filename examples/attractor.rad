import compiler
import range for Range
import random for simple_random_float
import vec for vec3, vec4
import color for hsva_to_rgba
import matrix for mat4, mat4_identity, create_perspective_projection, mul_mat4_vec4, mul_mat4_mat4, ndc_to_screen
import array for Array, array_create
import graphics for begin_app, end_app, window_open, render_app, frame_ticks, get_mouse_down, put_float_image_data, get_mouse_x, get_mouse_y, set_fill_color, fill_rectangle, move_to, line_to, stroke, set_stroke_color, begin_path

window_width :: 320
window_height :: 240

band :: compiler.operator_bitwise_and


fn attractor(pos: vec3) -> vec3:
  sigma := 10.0
  row := 28.0
  beta := 2.6
  speed := 0.01

  dx := sigma * (-pos.x + pos.y)
  dy := -pos.x * pos.z + row * pos.x - pos.y
  dz := pos.x * pos.y - beta * pos.z

  pos + vec3(dx * speed, dy * speed, dz * speed)
  
fn main():

  begin_app()

  cube_points := array_create!vec3(8)
  for n in Range(0, 8):
    cube_points[n] = vec3(
      float(band(n / 4, 1)) - 0.5, 
      float(band(n / 2, 1)) - 0.5, 
      float(band(n / 1, 1)) - 0.5)

  screen_coords := array_create!vec3(0)

  projection := create_perspective_projection(
    120, window_width / window_height, 0.1, 10000)

  attractor_points := array_create!vec3(0)
  attractor_points.append(vec3(1.1, 2, 7))

  cube_edges := [(0, 1), (0, 2), (3, 1), (3, 2), (4, 5), (4, 6), (7, 5), (7, 6), (0, 4), (1, 5), (2, 6), (3, 7)]

  t := 0.0

  while window_open():

    set_fill_color(0, 0, 0, 1)
    fill_rectangle(0, 0, window_width, window_height)

    t += 0.1

    if attractor_points.size < 2000:
      prev_point := attractor_points[attractor_points.size - 1]
      new_point := attractor(prev_point)
      attractor_points.append(new_point)
    else:
      attractor_points.size = 1

    transform := (
      mat4_identity()
      .scale(2.5, 2.5, 2.5)
      .rotate_y(t * 0.1)
      .rotate_x(0.2)
      .translate(0, 0, -10)
      .premul(projection)
    )

    set_fill_color(1, 1, 1, 1)

    screen_coords.size = 0
    
    attractor_point_start := screen_coords.size

    for point in attractor_points:
      scale := 0.02
      vec := vec4(point.x * scale , point.y * scale, point.z * scale + 0.5, 1)

      clip_coords := mul_mat4_vec4(transform, vec)
      ndc := clip_coords.xyz.div_scalar(clip_coords.w)

      if clip_coords.w < 0:
        continue

      screen := ndc_to_screen(ndc, window_width, window_height)
      screen_coords.append(screen)

    set_stroke_color(1, 1, 1, 1)
    for i in Range(0, attractor_points.size - 1):

      begin_path()
      move_to(screen_coords[i].xy)
      line_to(screen_coords[i + 1].xy)
      stroke()


    # Cube border

    screen_coords.size = 0

    for point in cube_points:
      vec := vec4(point.x, point.y, point.z, 1)

      clip_coords := mul_mat4_vec4(transform, vec)
      ndc := clip_coords.xyz.div_scalar(clip_coords.w)

      if clip_coords.w < 0:
        continue

      screen := ndc_to_screen(ndc, window_width, window_height)
      screen_coords.append(screen)

    set_stroke_color(1, 0, 0, 1)
    for edge in cube_edges:

      begin_path()
      move_to(screen_coords[edge._1].xy)
      line_to(screen_coords[edge._2].xy)
      stroke()

    render_app()

  end_app()
