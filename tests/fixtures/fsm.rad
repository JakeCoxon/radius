import compiler for fsm, concat
import range for Range

fn foop(x: int):

  foo :: |yield|
    for i in Range(0, x):
      yield(i)

  bar :: |yield|
    for i in Range(1, 9):
      yield(i * i)

  bamp :: |yield|
    for i in Range(1, 9):
      yield(i * i * i)

  baz :: |yield|
    f := 1
    while true:
      yield(f)
      f *= 2

  consume :: |yield|
    while true:
      val := yield()
      print(val)

    
  concat2 :: |iterator_a, iterator_b|
    {|yield_outer|
      fsm!({|yield|
        iterator_a(yield)
        iterator_b(yield)
      }, {|yield| 
        while true:
          elem := yield()
          yield_outer(elem)
      })()
    }

  
  zip2 :: |iterator_a, iterator_b|
    {|yield_outer|
      fsm!(iterator_a, {|yield_a| 
        fsm!(iterator_b, {|yield_b| 
          while true:
            elem_a := yield_a()
            elem_b := yield_b()
            yield_outer((elem_a, elem_b))
        })()
      })()
    }

  

  consume2 :: |yield|
    val := yield()
    print("val 1", val)
    val = yield()
    print("val 2", val)
    val = yield()
    print("val 3", val)
    val = yield()
    print("val 4", val)

  
  print("OK")

  # fsm!(foo, consume2)()

  # fsm!(foo, consume)()

  # foo_then_bar :: concat2(foo, bar)

  zip_foo_bar :: zip2(foo, baz)
  # foo_then_bar :: concat(concat(foo, bar), bamp)

  for z in zip_foo_bar:
    print(z)

  # zip!(foo, bar, consume)()

fn main():
  foop(10)