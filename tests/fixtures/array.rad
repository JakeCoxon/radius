import compiler
import vec for vec3

const assert = compiler.assert

type Array!(T) @struct:
  data: rawptr
  size: int
  capacity: int

  const __iterate = array_iterate
  const __subscript = array_subscript
  const __set_subscript = array_set_subscript

fn array_create!(T)(initial_size: int) -> Array!T:
  let array: Array!T
  array.data = malloc(initial_size * (meta T.sizeof))
  array.size = initial_size
  array.capacity = initial_size
  array

fn append!(T)(array: ref Array!T, element: T) @method:
  if array.size == array.capacity:
    array.capacity = 16 if array.capacity == 0
    array.capacity *= 2
    array.data = realloc(array.data, array.capacity * (meta T.sizeof))
  compiler.unsafe_set_subscript(array.data, array.size, element)
  array.size += 1

fn array_free!(T)(array: ref Array!T):
  compiler.free(array.data)
  array.data = 0 as rawptr
  array.size = 0
  array.capacity = 0

fn array_iterate!(f, T)(array: Array!T) -> void @inline:
  let i = 0
  while i < array.size:
    f(compiler.unsafe_subscript!T(array.data, i))
    i += 1

fn array_subscript!(T)(array: Array!T, index: int) -> T @inline:
  compiler.unsafe_subscript!T(array.data, index)

fn array_set_subscript!(T)(array: Array!T, index: int, value: T) @inline:
  compiler.unsafe_set_subscript!T(array.data, index, value)

fn main():
  let arr = array_create!int(10)
  arr[0] = 2
  arr[1] = 1
  arr[2] = 6

  assert(arr[2] == 6)
  
  arr.append(10)
  arr.append(20)
  arr.append(30)
  arr.append(40)
  
  assert(arr[11] == 20)
  assert(arr[12] == 30)
  assert(arr[13] == 40)

  let arr2 = array_create!vec3(0)
  arr2.append(vec3(1, 2, 3))
  assert(arr2[0].x == 1)