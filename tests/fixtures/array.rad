import compiler

size_of_int :: 1

type Array!(T) @struct:
  data: rawptr
  size: int
  capacity: int

  __iterate :: array_iterate

fn array_create!(T)(initial_size: int) -> Array!T:
  array: Array!T
  array.data = compiler.malloc(initial_size * size_of_int)
  array.size = initial_size
  array.capacity = initial_size
  array

fn append!(T)(array: ref Array!T, element: T) @method:
  if array.size == array.capacity:
    array.capacity = 1 if array.capacity == 0
    array.capacity *= 2
    array.data = compiler.realloc(array.data, array.capacity * size_of_int)
  compiler.unsafe_set_subscript(array.data, array.size, element)
  array.size += 1

fn array_free!(T)(array: ref Array!T):
  compiler.free(array.data)
  array.data = 0 as rawptr
  array.size = 0
  array.capacity = 0

fn array_iterate!(f, T)(array: Array!T) -> void @inline:
  i := 0
  while i < array.size:
    f(compiler.unsafe_subscript!T(array.data, i))
    i += 1

fn main():
  arr := array_create!int(10)
  # arr[0] = 2
  # arr[1] = 1
  # arr[2] = 6
  compiler.unsafe_set_subscript(arr.data, 0, 2)
  compiler.unsafe_set_subscript(arr.data, 1, 1)
  compiler.unsafe_set_subscript(arr.data, 2, 6)

  for x in arr:
    print(x)
  
  arr.append(10)

  for x in arr:
    print(x)
  