import compiler
import range for Range
import array for Array, array_create

fn foo(a: int, b: int) -> int:
  a * b * 2

fn bar(a: int, b: int) -> int:
  a >= 2 and (b == 3 or b == 4)

fn foop(str: string):
  print(str.data)
  print(str.length)

fn foobar(b: Bar):
  print(b.x)
  print(b.y)

fn createbar(x: int, y: int):
  Bar(x, y)

fn do_thing() -> int:
  if 1 == 1:
    return 5454
  4343

type Bar @struct:
  x : int
  y : int 

type Baz:
  x : int
  y : int

fn my_bar(bar: ref Bar):
  bar.x = 200

fn main():

  bar := Bar(1, 2)
  my_bar(bar)

  print(bar.x)

  print("Hello", bar)

  f := 1.0
  g := 3.2 + f
  print(g * 12.2)

  h : double = 3.4124
  print(h * 2.23 * 2)

  # print(bar.x)
  # print(bar.y)
  # foobar(bar)
  # asdasd := createbar(3, 2)
  # print(asdasd.x)
  # bar.x = 10
  # print(bar.x)

  # Bar(1, 2).x = 2

  # arr := array_create!int(100)
  # arr.append(3)
  # print(arr[100])

  # foo := "Hello"
  # x := foo

  # baz := Baz(1, 2)
  # print(baz)
  # baz.y = 200

  # my_ptr := malloc(10000)
  # my_int1 := compiler.unsafe_subscript!int(my_ptr, 0)
  # compiler.unsafe_set_subscript(my_ptr, 1, 2)
  # compiler.unsafe_set_subscript(my_ptr, 2, 25)
  # compiler.unsafe_set_subscript(my_ptr, 3, 30)
  # my_int2 := compiler.unsafe_subscript!int(my_ptr, 1)
  # my_int3 := compiler.unsafe_subscript!int(my_ptr, 2)
  # my_int4 := compiler.unsafe_subscript!int(my_ptr, 3)
  # print(my_int1)
  # print(my_int2)
  # print(my_int3)
  # print(my_int4)
  
  # print(baz.y)
  # print(baz.x)

  # print(x)
  # foop(x)
  # print(x.data)
  # print(x.length)

  # print(do_thing())

  # # print("Foo")
  # y := 0
  # i := 0
  # while i < 100:
  #   y = (y + 1) * 23
  #   i += 1
  # print(y)
  
  # x := 2 == 2 and 1 == 2
  # print(bar(2, 3))
  # print(true)
  # print(bar(2, 3))
  # print(bar(2, 3))
  # print(bar(2, 3))
  # print(bar(3, 3))
  # print(bar(4, 3))
  # print(bar(4, 2))
  # print(bar(4, 1))
  # print(bar(2, 4))

  # i := 1
  # while true:
  #   print(i)
  #   if i > 200000:
  #     break
  #   i = (i + 4) * 3

  # x := 32
  # y := 24
  # z := x + y + 3 + foo(3, 4)
  # print(z)
  # print(2)

  # x *= 20
  # print(x)

  # foo := true
  # bar := foo == false
  # print(bar)

  # baz := y == 24
  # baz2 := y != 24
  # print(!baz2)
  # print(x <= 234)
  # print(x > 23124)

  # foop := calculate_state(1, 0, 1)
  # print(foop)

  # if 2 == 2:
  #   asdfadf := 32 + 2 * 4 * 1
  #   print(asdfadf)
  # else:
  #   asdfadf_2 := 32 + 2 + 3124165
  #   print(asdfadf_2)

  # asdasd := ifx 2 == 3: 1 else: 2
  # print(asdasd)
