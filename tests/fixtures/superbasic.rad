import compiler

bsl :: compiler.operator_bitshift_left
bsr :: compiler.operator_bitshift_right
band :: compiler.operator_bitwise_and

rule_num :: 32

fn calculate_state(a: int, b: int, c: int) -> int:
  index := bsl(a, 2) + bsl(b, 1) + c
  band(bsr(rule_num, index), 1)

fn foo(a: int, b: int) -> int:
  a * b * 2

fn barfoo(a: int, b: int) -> int:
  a >= 2 and (b == 3 or b == 4)

fn foop(str: string):
  print(str.data)
  print(str.length)

fn foobar(b: Bar):
  print(b.x)
  print(b.y)

fn createbar(x: int, y: int):
  Bar(x, y)

type Bar @struct:
  x : int
  y : int 

fn main():

  bar := Bar(1, 2)
  foo := 1
  bar2 := "my string"

  asd := barfoo(2, 3)

  print("asd")
  asdgf := !true

  asdgf = 1 > 2
  asdgf = !asdgf

  # i := 0
  # while i < 10:
  #   print("OK")
  # i += 1
  print(bar.x)
  print(bar.y)
  # foobar(bar)
  # asdasd := createbar(3, 2)
  # print(asdasd.x)

  fooasd := "Hello"
  x := fooasd
  

  # print(x)
  foop(x)
  # print(x.data)
  # print(x.length)

  # print("Foo")
  y := 0
  i := 0
  while i < 100:
    y = (y + 1) * 23
    i += 1
  print(y)
  
  # x := 2 == 2 and 1 == 2
  # print(bar(2, 3))
  # print(true)
  # print(bar(2, 3))
  # print(bar(2, 3))
  # print(bar(2, 3))
  # print(bar(3, 3))
  # print(bar(4, 3))
  # print(bar(4, 2))
  # print(bar(4, 1))
  # print(bar(2, 4))

  # i := 1
  # while true:
  #   print(i)
  #   if i > 200000:
  #     break
  #   i = (i + 4) * 3

  # x := 32
  # y := 24
  # z := x + y + 3 + foo(3, 4)
  # print(z)
  # print(2)

  # x *= 20
  # print(x)

  # foo := true
  # bar := foo == false
  # print(bar)

  # baz := y == 24
  # baz2 := y != 24
  # print(!baz2)
  # print(x <= 234)
  # print(x > 23124)

  foop := calculate_state(1, 0, 1)
  # print(foop)

  if 2 == 2:
    asdfadf := 32 + 2 * 4 * 1
    print(asdfadf)
  else:
    asdfadf_2 := 32 + 2 + 3124165
    print(asdfadf_2)

  asdasd := ifx 2 == 3: 1 else: 2
  # print(asdasd)
