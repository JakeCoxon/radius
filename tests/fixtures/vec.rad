import compiler for assert, static_length

type vec2i < VecType @struct:
  x: int
  y: int

type vec3i < VecType @struct:
  x: int
  y: int
  z: int

type vec2 < VecType @struct:
  x: float
  y: float

type vec3 < VecType @struct:
  x: float
  y: float
  z: float

fn magnitude!(T)(vec: T) -> float:
  magnitude := 0.0
  meta index := 0
  meta while index < static_length(vec):
    magnitude += vec.[index]
    meta index = index + 1
  magnitude

fn main():
  v1 := vec2i(1, 2)
  v2 := vec2i(3, 4)
  v3 := v1 + v2
  v4 := v2 - v1
  v5 := (v2 * v1) / (v1 + v2)

  v6 := v5 * 2
  v7 := 3 * v5

  v10 := vec3i(1, 3, 5)
  v11 := vec3i(7, 9, 11)
  v12 := v10 + v11

  v1 += vec2i(10, 10)
  v1 += (10, 20)

  v20 := vec2(2.3, 5.6) * 2.3
  v21 := 7.5 * vec2(3, 5.6)

  assert(v20.x == 5.29)
  assert(v21.y == 42)

  v30 := vec3(1, 2, 3)
  foo :: 3 + 2 + 1 - 4 - 2
  assert(v30.[foo] == 1)

  assert(int(magnitude(v20)) == 18)
  assert(magnitude(v30) == 6)