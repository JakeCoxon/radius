import compiler for get_current_loop, assert

fn compose3(a, b, c) -> any:
  {|x| a(b(c(x)))}

fn compose2(a, b) -> any:
  {|x| a(b(x))}

fn transduce!(trx, reducer)(iterable) @inline:
  final_reducer :: trx(reducer)
  acc := final_reducer.a()
  for x in iterable:
    loop :: get_current_loop()
    acc = final_reducer.c(acc, x, loop)
  final_reducer.b(acc)

fn map(mapping) -> any:
  {|next| %{
    a = next.a,
    b = next.b,
    c = {|acc, x, loop| next.c(acc, mapping(x), loop)}
  } }

fn take_while(predicate) -> any:
  {|next| %{
    a = next.a,
    b = next.b,
    c = {|acc, x, loop| 
      if !predicate(x):
        break loop
      next.c(acc, x, loop)
    } } }

fn drop_while(predicate) -> any:
  {|next| %{
    a = {|| (next.a(), false)},
    b = {|acc| next.b(acc._1)},
    c = {|acc, x, loop| 
      (ifx acc._2 or !predicate(x):
        (next.c(acc._1, x, loop), true)
      else:
        acc)
    } } }

fn filter(predicate) -> any:
  {|next| %{
    a = next.a,
    b = next.b,
    c = {|acc, x, loop| 
      if !predicate(x):
        continue loop
      next.c(acc, x, loop)
    } } }

fn sum() -> any: 
  %{a = {|| 0},
    b = {|acc| acc},
    c = {|acc, x, loop| acc + x} }

fn main():
  trx :: compose3(
    map {|x| x + 1},
    filter {|x| x < 4 },
    map {|x| x + 4}
  )

  list := [1, 2, 3, 4, 5, 6, 7]
  sum_result := transduce!(trx, sum())(list) # 6 + 7
  assert(sum_result == 13)
  
  sum_result2 := [1, 2, 3, 4, 5, 6, 7 | trx |> sum()] # 6 + 7
  assert(sum_result2 == 13)

  sum_result3 := [list... | trx |> sum()] # 6 + 7
  assert(sum_result3 == 13)

  sum_result4 := [list... | take_while {|x| x < 4} |> sum()] # 1 + 2 + 3
  assert(sum_result4 == 6)

  sum_result5 := [list... | drop_while {|x| x < 4} |> sum()] # 4 + 5 + 6 +7
  assert(sum_result5 == 22)
