import compiler for generator, concat, assert, operator_mod
import range for Range, ints

type Person @struct:
  age: int

foo :: |yield|
  for i in Range(0, 10):
    yield(i)

bar :: |yield|
  for i in Range(1, 9):
    yield(i * i)

bamp :: |yield|
  for i in Range(1, 9):
    yield(i * i * i)

baz :: |yield|
  f := 1
  while true:
    yield(f)
    f *= 2

squares :: |yield|
  i := 0
  while true:
    yield(i * i)
    i += 1

factorial :: |yield|
  i := 1
  f := 1
  while true:
    yield(f)
    f *= i
    i += 1

fn range2d(x: int, y: int): |yield|
  for j in Range(0, y):
    for i in Range(0, x):
      yield((i, j))
    
fixed_iterator :: |yield|
  yield(123)
  yield(32)
  yield(123)

fn custom_iterator(x: Person, foo: int): |yield|
  for i in Range(0, 10):
    yield((x.age + i, foo))

fn custom_iterator2(x: Person, foo: int): |yield|
  for i in Range(0, 10):
    yield(x.age + i + foo)


fn test_fold():

  numbers := [40, 20, 10, 32, 12, 3124]

  count := (fold(0) + numbers[:] * bamp[:] ...)
  print(count)
  assert(count == 678802)

  foos := [0, 0, 0, 0]
  foos[:] = numbers[:] * bamp[:] + 2 ...

  count2 := (fold(0) + foos[:] ...)
  print(count2)
  assert(count2 == 2526)

  count3 := (fold(0) + foo[:] ...)
  print(count3)
  assert(count3 == 45)


fn test_shorthand():

  numbers := [40, 20, 10, 32, 12, 3124]
  
  # x1 := @all(numbers[:] > 9)
  # assert(x1 == true)
  # print(x1)

  # x2 := @all(numbers[:] < 1000)
  # assert(x2 == false)
  # print(x2)

  # y1 := @any(numbers[:] == 20)
  # assert(y1 == true)
  # print(y1)

  # y2 := @any(numbers[:] == 1000)
  # assert(y2 == false)
  # print(y2)

  z1 := @sum(numbers[1:])
  assert(z1 == 3198)
  print(z1)

  # w1 := @sum(bar[:])
  # print(w1)
  # assert(w1 == 204)

  # assert(@any(squares[:] == 81) == true)
  # assert(@all(factorial[:] < 1000) == false)

fn test_min_max():
  numbers := [40, 20, 10, 32, 12, 3124]
  max := @max(numbers[:])
  min := @min(numbers[:])
  print(max, min)
  assert(max == 3124)
  assert(min == 10)

  max2 := @max(fixed_iterator[:])
  print(max2)

fn test_concat():

  numbers := [40, 20, 10, 32, 12, 3124]
  
  concat1 :: @concat(foo[:], bar[:])
  x3 := @sum(concat1[:])
  print(x3)
  assert(x3 == 249)


  concat2 :: @concat(foo[:], bar[:], bamp[:], numbers[:])
  x4 := @sum(concat2[:])
  print(x4)
  assert(x4 == 4783)

fn test_concat2():

  numbers := [40, 20, 10, 32, 12, 3124]
  
  concat1 :: @concat(2, 3, 4.2)
  x3 := @sum(concat1[:])
  print(x3)
  assert(x3 == 3496)

fn test_concat3():

  numbers := [40, 20, 10, 32, 12, 3124]
  
  concat1 :: @concat(foo[:], bar[:], numbers[:], 2, 3, 4)
  for x in concat1:
    print(x)


fn test_concat4():

  numbers := [40, 20, 10, 32, 12, 3124]
  
  concat1 :: @concat(foo[:], bar[:], 2, 3, 4)
  concat2 :: @concat(concat1[:], numbers[:], 5, 6, 7)

  res := 0
  res += concat2[:] ...
  print(res)
  assert(res == 3514)


fn test_concat5():

  numbers := [40, 20, 10, 32, 12, 3124]
  
  concat1 :: @concat(foo[:] * numbers[:], 2, 3, 4)
  x3 := @sum(concat1[:])
  print(x3)
  assert(x3 == 15813)


fn test_concat6():

  numbers := [40, 20, 10, 32, 12, 3124]
  
  concat1 :: @concat(foo[:] * numbers[:], 2, 3, 4)
  numbers[:] = concat1[:] ...
  print(numbers[:]) ...


fn test_people():

  people := [Person(10), Person(20), Person(30), Person(40), Person(50)]
  
  x4 := @sum(people[:].age)
  print(x4)
  assert(x4 == 150)



fn test_last():

  numbers := [40, 20, 10, 32, 12, 3124]
  x := @last(numbers[:])
  print(x)
  assert(x == 3124)

fn test_first():

  numbers := [40.0, 20, 10, 32, 12, 3124]
  
  x := @first(numbers[:])
  print(x)

  people := [Person(10), Person(20), Person(30), Person(40), Person(50)]
  p := @first(people[1:])

  print(p.age)
  # assert(x == 40)

fn test_range():
  rng := Range(10, 20)
  print(rng[1:10:2]) ...

  print(ints[1:10:2]) ...

  sum := @sum(ints[1:10:2])
  assert(sum == 25)

fn test_stuff():

  # print(squares[5:10:2]) ...
  # print(squares[1:100:10]) ...
  # print(squares[2:10], factorial[1:20:2]) ...
  print(factorial[:20:4], factorial[1:10:2]) ...
  # print(@sum(squares[:10]))

fn test_for_loop():

  for a in ints[1:100:10]:
    print(a)

  print("--")

  for a, b, c in (ints[:4], squares[:], factorial[:]):
    print(a, b, c)

  print("--")

  for a, b in (squares[:], factorial[:]):
    print(a, b)
    if a >= 100:
      break

fn test_if():

  numbers := [43, 21, 10, 34, 12, 3124]
  x := @sum(numbers[:] if numbers[:] > 20)
  print(x)
  assert(x == 3222)
  
  # TODO: Syntax?
  (print(numbers[:]) if operator_mod(numbers[:], 2) == 0) ...

  print("--")

  for x in (numbers[:] if numbers[:] < 20):
    print(x)

  print("--")

  assert(@first(numbers[:] if numbers[:] < 20) == 10)
  assert(@last(numbers[:] if numbers[:] < 20) == 12)

  cc1 :: @concat(numbers[:] if numbers[:] < 20, numbers[:] if numbers[:] > 20)
  print(cc1[:]) ...

fn test_while():
  
  numbers := [40, 20, 10, 32, 12, 3124]
  x := @sum(numbers[:] while numbers[:] < 100)
  print(x)
  assert(x == 114)

  # TODO: Syntax?
  (print(factorial[:]) while numbers[:] < 100) ...

  for x in (numbers[:] while numbers[:] < 100):
    print(x)

fn test_sideeffect():

  numbers := [40, 20, 10, 32, 12, 3124]
  calls := 0

  side :: {||
    print("sideeffect")
    calls += 1
    500
  }

  x := @any(numbers[:] > side())
  assert(calls == 1)

fn test_template!(T)():

  numbers := [40, 20, 10, 32, 12, 3124]
  x := @sum(numbers[:])
  print(x)
  
fn test_flatmap():

  cells := [[1,2,3], [4,5,6], [7,8,9]]

  # foo :: @mapcat(cells[:])

  # x := @sum(cells[:][:])

fn test_custom_iterator():
  person := Person(10)
  it :: custom_iterator(person, 23)
  for x, y in it:
    print(x, y)

  it2 :: custom_iterator2(person, 23)
  f := @sum(it2[:])
  assert(f == 375)

  f2 := @sum((meta custom_iterator2(person, 23))[:])
  assert(f2 == 375)


fn test_iterator_to_array():
  arr := [
    3,
    factorial[:5] ...,
    factorial[10:12] ...,
    1, 2
  ]
  assert(@sum(arr[:]) == 43545640)
  print(arr[:]) ...
  

fn test_array():
  x := 0.2
  arr := [ 3, 1, 1]
  # assert(@sum(arr[:]) == 43545640)
  print(arr[:]) ...
  

fn main():
  # test_fold()
  # test_shorthand()
  # test_concat()
  # test_concat2()
  # test_concat3()
  # test_concat4()
  # test_concat5()
  # test_concat6()
  # test_min_max()
  # test_people()
  # test_last()
  test_first()
  # test_range()
  # test_stuff()
  # test_for_loop()
  # test_if()
  # # test_sideeffect()
  # test_template!int()
  # test_template!float()
  # test_while()
  # test_flatmap()
  # test_custom_iterator()
  # test_iterator_to_array()
  # test_array()
