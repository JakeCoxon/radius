import compiler for generator, concat, assert
import range for Range


fn foop(x: int):

  foo :: |yield|
    for i in Range(0, x):
      yield(i)

  bar :: |yield|
    for i in Range(1, 9):
      yield(i * i)

  bamp :: |yield|
    for i in Range(1, 9):
      yield(i * i * i)

  baz :: |yield|
    f := 1
    while true:
      yield(f)
      f *= 2

  consume :: |yield|
    while true:
      val := yield()
      print(val)

    
  consume2 :: |yield|
    val := yield()
    print("val 1", val)
    val = yield()
    print("val 2", val)
    val = yield()
    print("val 3", val)
    val = yield()
    print("val 4", val)

  
  numbers := [40, 20, 10, 32, 12, 3124]

  count := (fold(0) + numbers[:] * bamp[:] ...)
  assert(count == 678802)

  foos := [0, 0, 0, 0]
  foos[:] = numbers[:] * bamp[:] + 2 ...

  count2 := (fold(0) + foos[:] ...)
  assert(count2 == 2526)

  count3 := (fold(0) + foo[:] ...)
  assert(count3 == 45)

  print(count)
  print(count2)
  print(count3)

  #x := @all(lst1[:] > 0)
  #x := @any(lst1[:] == 2)
  #x := @sum(lst1)
  #x := @sum(x for x in lst1 if lst1[:] > 2)
  #x := @max(lst1 if lst1[:] > 2) orelse 0
  #x := (@fold(0) + lst1[:]) ...)


fn main():
  foop(10)