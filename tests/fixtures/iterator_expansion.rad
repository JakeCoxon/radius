import compiler for concat, assert, operator_mod
import range for Range, ints

type Person @struct:
  age: int

const foo = |yield|
  for i in Range(0, 10):
    yield(i)

const bar = |yield|
  for i in Range(1, 9):
    yield(i * i)

const bamp = |yield|
  for i in Range(1, 9):
    yield(i * i * i)

const baz = |yield|
  let f = 1
  while true:
    yield(f)
    f *= 2

const squares = |yield|
  let i = 0
  while true:
    yield(i * i)
    i += 1

const factorial = |yield|
  let i = 1
  let f = 1
  while true:
    yield(f)
    f *= i
    i += 1

fn range2d(x: int, y: int): |yield|
  for j in Range(0, y):
    for i in Range(0, x):
      yield((i, j))

const fixed_iterator = |yield|
  yield(123)
  if 1 == 1:
    yield(32)
  yield(123)

fn custom_iterator(x: Person, foo: int): |yield|
  for i in Range(0, 10):
    yield((x.age + i, foo))

fn custom_iterator2(x: Person, foo: int): |yield|
  for i in Range(0, 10):
    yield(x.age + i + foo)


fn test_fold():

  let numbers = [40, 20, 10, 32, 12, 3124]

  let count = (fold(0) + numbers[:] * bamp[:] ...)
  print(count)
  assert(count == 678802)

  let count2 = (fold(0) + fixed_iterator[:] ...)
  assert(count2 == 278)

  const r = range2d(4, 3)
  let count3 = (fold(0) + r[:]._1 ...)
  assert(count3 == 18)

fn test_fold_setter():
  let numbers = [40, 20, 10, 32, 12, 3124]
  let foos = [0, 0, 0, 0]
  foos[:] = numbers[:] * bamp[:] + 2 ...

  let count2 = (fold(0) + foos[:] ...)
  print(count2)
  assert(count2 == 2526)

  let count3 = (fold(0) + foo[:] ...)
  print(count3)
  assert(count3 == 45)

fn test_setters():
  let numbers = [40, 20, 10, 32, 12, 3124]

  numbers[:] = 1 ...
  assert(@sum(numbers[:]) == 6)

  numbers[:] = [1, 2, 3][:] ...
  assert(@sum(numbers[:]) == 9)

  numbers[:] = fold(0) + 1 ...
  assert(@sum(numbers[:]) == 21)

fn test_shorthand():

  let numbers = [40, 20, 10, 32, 12, 3124]
  
  let x1 = @all(numbers[:] > 9)
  assert(x1 == true)
  print(x1)

  let x2 = @all(numbers[:] < 1000)
  assert(x2 == false)
  print(x2)

  let y1 = @any(numbers[:] == 20)
  assert(y1 == true)
  print(y1)

  let y2 = @any(numbers[:] == 1000)
  assert(y2 == false)
  print(y2)

  let z1 = @sum(numbers[1:])
  assert(z1 == 3198)
  print(z1)

  let w1 = @sum(bar[:])
  print(w1)
  assert(w1 == 204)

  assert(@any(squares[:] == 81) == true)
  assert(@all(factorial[:] < 1000) == false)

fn test_min_max():
  let numbers = [40, 20, 10, 32, 12, 3124]
  let max = @max(numbers[:])
  let min = @min(numbers[:])
  print(max, min)
  assert(max == 3124)
  assert(min == 10)

  let max2 = @max(fixed_iterator[:])
  print(max2)

  let numbers2 = [23.1, 23.2, 23.3, 23.4]
  let max3 = @max(numbers2[:])
  assert(max3 == 23.4)

fn test_concat():

  let numbers = [40, 20, 10, 32, 12, 3124]
  
  const concat1 = @concat(foo[:], bar[:])
  let x3 = @sum(concat1[:])
  print(x3)
  assert(x3 == 249)


  const concat2 = @concat(foo[:], bar[:], bamp[:], numbers[:])
  let x4 = @sum(concat2[:])
  print(x4)
  assert(x4 == 4783)

fn test_concat2():

  let numbers = [40, 20, 10, 32, 12, 3124]
  
  const concat1 = @concat(foo[:], bar[:], numbers[:], 2, 3, 4)
  let x3 = @sum(concat1[:])
  print(x3)
  assert(x3 == 3496)

fn test_concat3():

  let numbers = [40, 20, 10, 32, 12, 3124]
  
  const concat1 = @concat(foo[:], bar[:], numbers[:], 2, 3, 4)
  for x in concat1:
    print(x)


fn test_concat4():

  let numbers = [40, 20, 10, 32, 12, 3124]
  
  const concat1 = @concat(foo[:], bar[:], 2, 3, 4)
  const concat2 = @concat(concat1[:], numbers[:], 5, 6, 7)

  let res = 0
  res += concat2[:] ...
  print(res)
  assert(res == 3514)


fn test_concat5():

  let numbers = [40, 20, 10, 32, 12, 3124]
  
  const concat1 = @concat(foo[:] * numbers[:], 2, 3, 4)
  let x3 = @sum(concat1[:])
  print(x3)
  assert(x3 == 15813)


fn test_concat6():

  let numbers = [40, 20, 10, 32, 12, 3124]
  
  const concat1 = @concat(foo[:] * numbers[:], 2, 3, 4)
  numbers[:] = concat1[:] ...
  print(numbers[:]) ...


fn test_people():

  let people = [Person(10), Person(20), Person(30), Person(40), Person(50)]
  
  let x4 = @sum(people[:].age)
  print(x4)
  assert(x4 == 150)



fn test_last():

  let numbers = [40, 20, 10, 32, 12, 3124]
  let x = @last(numbers[:])
  print(x)
  assert(x == 3124)

fn test_first_last():

  let numbers = [40.0, 20, 10, 32, 12, 3124]
  
  let x = @first(numbers[:])
  print(x)
  assert(x == 40)

  # y = @last(numbers[:])
  # print(y)
  # assert(y == 3124)

  let people = [Person(10), Person(20), Person(30), Person(40), Person(50)]
  let p = @first(people[1:])
  assert(p.age == 20)

  # p2 = @last(people[:])
  # assert(p2.age == 50)

fn test_range():
  let rng = Range(10, 20)
  print(rng[1:10:2]) ...

  print(ints[1:10:2]) ...

  let sum = @sum(ints[1:10:2])
  assert(sum == 25)
  

fn test_stuff():

  # print(squares[5:10:2]) ...
  # print(squares[1:100:10]) ...
  # print(squares[2:10], factorial[1:20:2]) ...
  print(factorial[:20:4], factorial[1:10:2]) ...
  # print(@sum(squares[:10]))

fn test_for_loop():

  for a in ints[1:100:10]:
    print(a)

  print("--")

  for a, b, c in (ints[:4], squares[:], factorial[:]):
    print(a, b, c)

  print("--")

  for a, b in (squares[:], factorial[:]):
    print(a, b)
    if a >= 100:
      break

fn test_if():

  let numbers = [43, 21, 10, 34, 12, 3124]
  let x = @sum(numbers[:] if numbers[:] > 20)
  print(x)
  assert(x == 3222)
  
  print(numbers[:]) if operator_mod(numbers[:], 2) == 0 ...

  print("--")

  for x in (numbers[:] if numbers[:] < 20):
    print(x)

  print("--")

  assert(@first(numbers[:] if numbers[:] < 20) == 10)
  assert(@last(numbers[:] if numbers[:] < 20) == 12)

  const cc1 = @concat(numbers[:] if numbers[:] < 20, numbers[:] if numbers[:] > 20)
  print(cc1[:]) ...

fn test_while():
  
  let numbers = [40, 20, 10, 32, 12, 3124]
  let x = @sum(numbers[:] while numbers[:] < 100)
  print(x)
  assert(x == 114)

  print(factorial[:]) while numbers[:] < 100 ...

  for x in (numbers[:] while numbers[:] < 100):
    print(x)

fn test_sideeffect():

  let numbers = [40, 20, 10, 32, 12, 3124]
  let calls = 0

  const side = {||
    print("sideeffect")
    calls += 1
    500
  }

  let x = @any(numbers[:] > side())
  assert(calls == 1)

fn test_template!(T)():

  let numbers = [40, 20, 10, 32, 12, 3124]
  let x = @sum(numbers[:])
  print(x)
  
fn test_flatmap():

  let cells = [[1,2,3], [4,5,6], [7,8,9]]

  # foo = @mapcat(cells[:])

  # x = @sum(cells[:][:])

fn test_custom_iterator():
  let person = Person(10)
  const it = custom_iterator(person, 23)
  for x, y in it:
    print(x, y)

  const it2 = custom_iterator2(person, 23)
  let f = @sum(it2[:])
  assert(f == 375)

  let f2 = @sum((meta custom_iterator2(person, 23))[:])
  assert(f2 == 375)


fn test_iterator_to_array():
  let arr = [
    3,
    factorial[:5] ...,
    factorial[10:12] ...,
    1, 2
  ]
  assert(@sum(arr[:]) == 43545640)
  print(arr[:]) ...

  let arr2 = [factorial[:5] + factorial[1:6] ...]
  assert(@sum(arr2[:]) == 187)

  let arr3 = [factorial[:5] if factorial[:5] > 5 ...]
  assert(@sum(arr3[:]) == 30)

  let arr4 = [1, 2, 3, 5 if false]
  assert(@sum(arr4[:]) == 6)

fn test_for_expr_array():

  const r = range2d(4, 3)
  let arr = [x + x * y for x, y in r ...]
  assert(@sum(arr[:]) == 36)
  
fn test_slice():
  const c = @concat(factorial[2:8:2])
  assert(@sum(c[:]) == 746)

fn test_array():
  let x = 0.2
  let arr = [x, 1, 1]
  assert(@sum(arr[:]) == 2.2)

fn test_float_sum():
  let asd = [1,2,3.2]
  let s = @sum(asd[:] + float(foo[:]))
  assert(s == 9.2)

fn main():
  test_fold()
  test_fold_setter()
  test_setters()
  test_shorthand()
  test_concat()
  test_concat2()
  test_concat3()
  test_concat4()
  test_concat5()
  test_concat6()
  test_min_max()
  test_people()
  test_last()
  test_first_last()
  test_range()
  test_stuff()
  test_for_loop()
  test_if()
  # test_sideeffect()
  test_template!int()
  test_template!float()
  test_while()
  test_flatmap()
  test_custom_iterator()
  test_iterator_to_array()
  test_for_expr_array()
  test_array()
  test_slice()
  test_float_sum()