type Person:
  name : string
  age : int

type MyVec @struct:
  x : int
  y : int

fn foo(tup: (int, float, Person, MyVec)):
  print(tup._1 + int(tup._2) + tup._3.age + tup._4.x + tup._4.y)

fn modify_tuple(tup: (int, float, Person, MyVec)):
  tup._3.age = 31
  tup._4.x = 12
  tup._4.y = 10

fn main():
  let vec = MyVec(4, 3) # value type
  let person = Person("Jake", 300) # reference type

  let tup = (1, float(2), person, vec)

  modify_tuple(tup)

  foo(tup)

  let new_vec = MyVec(30, 40)
  let new_person = Person("Another Person", 100)
  # overwrite tup
  tup = (23, float(67), new_person, new_vec)

  foo(tup)

  let list = [MyVec(30, 40), MyVec(1, 2), MyVec(3, 6)]

  let x = list[0].x + list[1].y
  print(x)

  let list2 = [
    Person("Person1", 101), 
    Person("Person2", 102), 
    Person("Person3", 103)]

  print(list2[0].age)

  let list3 = [
    (23, float(67), new_person, MyVec(124, 53)), 
    (13, float(12), new_person, MyVec(123, 40)), 
    (51, float(67), new_person, MyVec(312, 23))]

  print(list3[:]._1) ...
  