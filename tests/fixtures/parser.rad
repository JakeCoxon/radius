type Person:
  name : string
  age : int

type MyVec @struct:
  x : int
  y : int

fn foo(tup: (int, float, Person, MyVec)):
  print(tup._1 + int(tup._2) + tup._3.age + tup._4.x + tup._4.y)

fn modify_tuple(tup: (int, float, Person, MyVec)):
  tup._3.age = 31
  tup._4.x = 12
  tup._4.y = 10

@@external("fill_rectangle")
fn thing() -> int

fn named_func(foo: int, bar: int) -> int:
  foo * 32 + bar

fn main():

  let new_vec = MyVec(30, 40)
  let new_person = Person("Another Person", 100)

  let asdf = thing()

  let tup = (23, float(67), new_person, new_vec)

  foo(tup)

  let list = [MyVec(30, 40), MyVec(1, 2), MyVec(3, 6)]

  let x = list[0].x + list[1].y
  print(x)

  let list2 = [
    Person("Person1", 101), 
    Person("Person2", 102), 
    Person("Person3", 103)]

  print(list2[0].age)

  named_func(bar=1, foo=2)

  let asdffs = { 2 + 3 + 4 } + 1
  let asdffs2 = { 
    let ff = 2 + 3 + 4
    ff + 32
  } + 1

  let gf = { 123? + 123? }.orelse 30

  let x = 32
  let y: int = 123
  const asd = 23 + 3135

  let (x, Some(a, b), y) = (1, (2, 3), 4)
  orelse return 30

  let thing = 23.match {
    Some(a):
      print(a)
      123
    None: 232
  }.foo.bar

  let x = [ a? + b? ...]

  let x = ( a[:]? + b[:]? ).iter
  let x = [ a? + b? ...].iter
  let x = ({
    let foo = a? + b?
    foo + 32
  }.orelse 0).iter

  let x, y = thing
  let (x, y) = thing
  let Some(x, y) = thing
  let Some(x, y), Some(x, y) = thing
  let (Some(x, y), None) = thing
  let a, b, c, d, Some(e), f = thing
  orelse return 30

  let x = thing.match {
    Some(a): 123
    None: 232
  }


  # hello