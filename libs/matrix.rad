import vec for vec3, vec4

type mat3 @struct:
  m11: float
  m12: float
  m13: float
  m21: float
  m22: float
  m23: float
  m31: float
  m32: float
  m33: float

type mat4 @struct:
  m11: float
  m12: float
  m13: float
  m14: float
  m21: float
  m22: float
  m23: float
  m24: float
  m31: float
  m32: float
  m33: float
  m34: float
  m41: float
  m42: float
  m43: float
  m44: float

fn mul_mat3_vec3(m: mat3, v: vec3) -> vec4:
  result: vec3
  result.x = m.m11 * v.x + m.m12 * v.y + m.m13 * v.z
  result.y = m.m21 * v.x + m.m22 * v.y + m.m23 * v.z
  result.z = m.m31 * v.x + m.m32 * v.y + m.m33 * v.z
  result

fn mul_mat4_vec4(m: mat4, v: vec4) -> vec4:
  result: vec4
  result.x = m.m11 * v.x + m.m12 * v.y + m.m13 * v.z + m.m14 * v.w
  result.y = m.m21 * v.x + m.m22 * v.y + m.m23 * v.z + m.m24 * v.w
  result.z = m.m31 * v.x + m.m32 * v.y + m.m33 * v.z + m.m34 * v.w
  result.w = m.m41 * v.x + m.m42 * v.y + m.m43 * v.z + m.m44 * v.w
  result

fn mul_mat4_mat4(m1: mat4, m2: mat4) -> mat4:
  result: mat4

  result.m11 = m1.m11 * m2.m11 + m1.m12 * m2.m21 + m1.m13 * m2.m31 + m1.m14 * m2.m41
  result.m12 = m1.m11 * m2.m12 + m1.m12 * m2.m22 + m1.m13 * m2.m32 + m1.m14 * m2.m42
  result.m13 = m1.m11 * m2.m13 + m1.m12 * m2.m23 + m1.m13 * m2.m33 + m1.m14 * m2.m43
  result.m14 = m1.m11 * m2.m14 + m1.m12 * m2.m24 + m1.m13 * m2.m34 + m1.m14 * m2.m44

  result.m21 = m1.m21 * m2.m11 + m1.m22 * m2.m21 + m1.m23 * m2.m31 + m1.m24 * m2.m41
  result.m22 = m1.m21 * m2.m12 + m1.m22 * m2.m22 + m1.m23 * m2.m32 + m1.m24 * m2.m42
  result.m23 = m1.m21 * m2.m13 + m1.m22 * m2.m23 + m1.m23 * m2.m33 + m1.m24 * m2.m43
  result.m24 = m1.m21 * m2.m14 + m1.m22 * m2.m24 + m1.m23 * m2.m34 + m1.m24 * m2.m44

  result.m31 = m1.m31 * m2.m11 + m1.m32 * m2.m21 + m1.m33 * m2.m31 + m1.m34 * m2.m41
  result.m32 = m1.m31 * m2.m12 + m1.m32 * m2.m22 + m1.m33 * m2.m32 + m1.m34 * m2.m42
  result.m33 = m1.m31 * m2.m13 + m1.m32 * m2.m23 + m1.m33 * m2.m33 + m1.m34 * m2.m43
  result.m34 = m1.m31 * m2.m14 + m1.m32 * m2.m24 + m1.m33 * m2.m34 + m1.m34 * m2.m44

  result.m41 = m1.m41 * m2.m11 + m1.m42 * m2.m21 + m1.m43 * m2.m31 + m1.m44 * m2.m41
  result.m42 = m1.m41 * m2.m12 + m1.m42 * m2.m22 + m1.m43 * m2.m32 + m1.m44 * m2.m42
  result.m43 = m1.m41 * m2.m13 + m1.m42 * m2.m23 + m1.m43 * m2.m33 + m1.m44 * m2.m43
  result.m44 = m1.m41 * m2.m14 + m1.m42 * m2.m24 + m1.m43 * m2.m34 + m1.m44 * m2.m44

  result

fn create_perspective_projection(fov: float, aspect_ratio: float, near_plane: float, far_plane: float) -> mat4:
  result := mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

  scale := 1 / tan(fov * 0.5 * PI / 180)

  result.m11 = scale / aspect_ratio
  result.m22 = scale
  result.m33 = -far_plane / (far_plane - near_plane) # Remap z to [0,1]
  result.m34 = -1
  result.m43 = -far_plane * near_plane / (far_plane - near_plane) # Set the translation component

  result

fn ndc_to_screen(ndc: vec3, screen_width: float, screen_height: float) -> vec3:
  screen_coords: vec3
  screen_coords.x = (ndc.x + 1) / 2 * screen_width
  screen_coords.y = (1 - ndc.y) / 2 * screen_height # Invert y-axis because NDC's y-axis points up and screen's y-axis points down
  screen_coords.z = ndc.z

  screen_coords

fn create_translation_matrix(tx: float, ty: float, tz: float) -> mat4:
  result := mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)

  result.m14 = tx
  result.m24 = ty
  result.m34 = tz

  result

fn create_rotation_matrix_x(angle_radians: float) -> mat4:
  result := mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)

  cos_angle := cos(angle_radians)
  sin_angle := sin(angle_radians)

  result.m22 = cos_angle
  result.m23 = -sin_angle
  result.m32 = sin_angle
  result.m33 = cos_angle

  result

fn create_rotation_matrix_y(angle_radians: float) -> mat4:
  result := mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)

  cos_angle := cos(angle_radians)
  sin_angle := sin(angle_radians)

  result.m11 = cos_angle
  result.m13 = sin_angle
  result.m31 = -sin_angle
  result.m33 = cos_angle

  result

fn create_rotation_matrix_z(angle_radians: float) -> mat4:
  result := mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)

  cos_angle := cos(angle_radians)
  sin_angle := sin(angle_radians)

  result.m11 = cos_angle
  result.m12 = -sin_angle
  result.m21 = sin_angle
  result.m22 = cos_angle

  result

fn create_scaling_matrix(sx: float, sy: float, sz: float) -> mat4:
  result := mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)

  result.m11 = sx
  result.m22 = sy
  result.m33 = sz

  result

fn mat4_identity() -> mat4:
  mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)

fn rotate_x(m: mat4, angle_radians: float) -> mat4 @method:
  mul_mat4_mat4(create_rotation_matrix_x(angle_radians), m)
fn rotate_y(m: mat4, angle_radians: float) -> mat4 @method:
  mul_mat4_mat4(create_rotation_matrix_y(angle_radians), m)
fn rotate_z(m: mat4, angle_radians: float) -> mat4 @method:
  mul_mat4_mat4(create_rotation_matrix_z(angle_radians), m)

fn translate(m: mat4, tx: float, ty: float, tz: float) -> mat4 @method:
  mul_mat4_mat4(create_translation_matrix(tx, ty, tz), m)
fn scale(m: mat4, sx: float, sy: float, sz: float) -> mat4 @method:
  mul_mat4_mat4(create_scaling_matrix(sx, sy, sz), m)

fn premul(m: mat4, m2: mat4) -> mat4 @method:
  mul_mat4_mat4(m2, m)