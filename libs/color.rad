type rgba < VecType @struct:
  r: float
  g: float
  b: float
  a: float

type rgb < VecType @struct:
  r: float
  g: float
  b: float

fn hsva_to_rgba(h: float, s: float, v: float, a: float) -> rgba:
  let c = v * s
  let x = c * (1 - abs(fmod(h / 60, 2.0) - 1))
  let m = rgba(v - c, v - c, v - c, 0)
  if h >= 0 and h < 60:
    return rgba(c, x, 0, a) + m
  elif h >= 60 and h < 120:
    return rgba(x, c, 0, a) + m
  elif h >= 120 and h < 180:
    return rgba(0, c, x, a) + m
  elif h >= 180 and h < 240:
    return rgba(0, x, c, a) + m
  elif h >= 240 and h < 300:
    return rgba(x, 0, c, a) + m
  else:
    return rgba(c, 0, x, a) + m
  unreachable()
