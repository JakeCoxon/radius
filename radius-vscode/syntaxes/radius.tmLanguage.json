{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Radius",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"begin": "(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.list.begin.radius"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.list.end.radius"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "storage.type.type.radius"
				}
			},
			"match": "\\b(type)\\b"
		},
		{
			"begin": "(^[ \\t]+)?(?=#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.radius"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.radius"
						}
					},
					"end": "\\n",
					"name": "comment.line.number-sign.radius"
				}
			]
		},
		{
			"match": "\\b(?i:(0x\\h*)L)",
			"name": "constant.numeric.integer.long.hexadecimal.radius"
		},
		{
			"match": "\\b(?i:(0x\\h*))",
			"name": "constant.numeric.integer.hexadecimal.radius"
		},
		{
			"match": "\\b(?i:(0o?[0-7]+)L)",
			"name": "constant.numeric.integer.long.octal.radius"
		},
		{
			"match": "\\b(?i:(0o?[0-7]+))",
			"name": "constant.numeric.integer.octal.radius"
		},
		{
			"match": "\\b(?i:(0b[01]+)L)",
			"name": "constant.numeric.integer.long.binary.radius"
		},
		{
			"match": "\\b(?i:(0b[01]+))",
			"name": "constant.numeric.integer.binary.radius"
		},
		{
			"match": "\\b(?i:(((\\d+(\\.(?=[^a-zA-Z_])\\d*)?|(?<=[^0-9a-zA-Z_])\\.\\d+)(e[\\-\\+]?\\d+)?))J)",
			"name": "constant.numeric.complex.radius"
		},
		{
			"match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])",
			"name": "constant.numeric.float.radius"
		},
		{
			"match": "(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))",
			"name": "constant.numeric.float.radius"
		},
		{
			"match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))",
			"name": "constant.numeric.float.radius"
		},
		{
			"match": "\\b(?i:([1-9]+[0-9]*|0)L)",
			"name": "constant.numeric.integer.long.decimal.radius"
		},
		{
			"match": "\\b([1-9]+[0-9]*|0)",
			"name": "constant.numeric.integer.decimal.radius"
		},
		{
			"match": "\\btrue",
			"name": "constant.language.boolean.true.radius"
		},
		{
			"match": "\\bfalse",
			"name": "constant.language.boolean.false.radius"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.radius",
				"match": "\\b(and|as\\!|as|break|class|continue|comptime|const|def|defn|elif|else|fn|for|if|ifx|in|lambda|let|meta|null|or|orelse|pass|return|try|while|with|type|interface|import|block|fold|ref)\\b"
			}]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.radius",
				"match": "\\b(==|!=|:=|<=|>=|\\+=|\\-=|\\*=|\\/=|::|->|\\|\\>|\\.\\.\\.|[@!:,=<>\\-+\\.*\/'\\|\\?])\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.radius",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.radius",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.radius"
}